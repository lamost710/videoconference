<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutConferencexpVenueServiceText" xml:space="preserve">
    <value>ConferenceXP Venue Service
Microsoft Research &amp; UW Center for Collaborative Technology

{0}

For more information, see http://cct.cs.washington.edu/downloads/CXP</value>
  </data>
  <data name="AboutConferencexpVenueServiceTitle" xml:space="preserve">
    <value>About ConferenceXP Venue Service</value>
  </data>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="Advanced" xml:space="preserve">
    <value>Advanced...</value>
  </data>
  <data name="AdvancedVenueSettings" xml:space="preserve">
    <value>Advanced Venue Settings</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ChoosePicture" xml:space="preserve">
    <value>Choose Picture...</value>
  </data>
  <data name="ClearPassword" xml:space="preserve">
    <value>Clear Password</value>
  </data>
  <data name="ConferencexpVenueServiceManager" xml:space="preserve">
    <value>ConferenceXP Venue Service Manager</value>
  </data>
  <data name="Confirm" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="ConfirmDefaultIconRestoreText" xml:space="preserve">
    <value>Are you sure you want to replace the icon for this venue with the default icon?</value>
  </data>
  <data name="ConfirmDefaultIconRestoreTitle" xml:space="preserve">
    <value>Confirm Default Icon Restore</value>
  </data>
  <data name="ConfirmDeleteText" xml:space="preserve">
    <value>Are you sure you want to delete the identifier expression "{0}"?</value>
  </data>
  <data name="ConfirmDeleteTitle" xml:space="preserve">
    <value>Confirm Delete</value>
  </data>
  <data name="ConfirmParticipantDeleteText" xml:space="preserve">
    <value>Are you sure you want to delete the participant "{0}"?</value>
  </data>
  <data name="ConfirmParticipantDeleteTitle" xml:space="preserve">
    <value>Confirm Participant Delete</value>
  </data>
  <data name="ConfirmPassword" xml:space="preserve">
    <value>Confirm Password</value>
  </data>
  <data name="ConfirmReplaceText" xml:space="preserve">
    <value>Are you sure you want to replace the identifier expression "{0}" with "{1}"?</value>
  </data>
  <data name="ConfirmReplaceTitle" xml:space="preserve">
    <value>Confirm Replace</value>
  </data>
  <data name="ConfirmVenueDeleteText" xml:space="preserve">
    <value>Are you sure you want to delete the venue "{0}"?</value>
  </data>
  <data name="ConfirmVenueDeleteTitle" xml:space="preserve">
    <value>Confirm Venue Delete</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DotNetAndGrids" xml:space="preserve">
    <value>.NET &amp; Grids</value>
  </data>
  <data name="DuplicateIPAddressText" xml:space="preserve">
    <value>The venue "{0}" is already using the IP address you specified. Please specify another IP address.</value>
  </data>
  <data name="DuplicateIpAddressTitle" xml:space="preserve">
    <value>Duplicate IP Address</value>
  </data>
  <data name="DuplicateOwnerText" xml:space="preserve">
    <value>The venue "{0}" is already using the owner you specified. Please specify another owner.</value>
  </data>
  <data name="DuplicateOwnerTitle" xml:space="preserve">
    <value>Duplicate Owner</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit...</value>
  </data>
  <data name="EditParticipant" xml:space="preserve">
    <value>Edit Participant</value>
  </data>
  <data name="EditVenue" xml:space="preserve">
    <value>Edit Venue</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value> E-Mail</value>
    <comment>Note: there is a space before this string</comment>
  </data>
  <data name="EmailColon" xml:space="preserve">
    <value>E-Mail:</value>
  </data>
  <data name="ForExample" xml:space="preserve">
    <value>For example: .*@[O|o]rganization\\.[E|e]du</value>
  </data>
  <data name="HelpURLMulticast" xml:space="preserve">
    <value>http://cct.cs.washington.edu/project-wiki/index.php/ConferenceXP_Venue_Service#Choosing_a_multicast_IP_address</value>
    <comment>DO NOT TRANSLATE</comment>
  </data>
  <data name="HelpURLVenueService" xml:space="preserve">
    <value>http://cct.cs.washington.edu/project-wiki/index.php/ConferenceXP_Venue_Service</value>
    <comment>DO NOT TRANSLATE</comment>
  </data>
  <data name="HowDoIChooseAMulticastIP" xml:space="preserve">
    <value>How do I choose a multicast IP address?</value>
  </data>
  <data name="Icon" xml:space="preserve">
    <value>Icon</value>
  </data>
  <data name="Identifier" xml:space="preserve">
    <value> Identifier</value>
    <comment>Note: there is a space before this string</comment>
  </data>
  <data name="IdentifierColon" xml:space="preserve">
    <value>Identifier:</value>
  </data>
  <data name="IdentifierExpression" xml:space="preserve">
    <value>Identifier expression:</value>
  </data>
  <data name="InvalidEmailInput" xml:space="preserve">
    <value>"E-Mail" is not a valid e-mail address.</value>
  </data>
  <data name="InvalidIdentifierInput" xml:space="preserve">
    <value>"Identifier" is not a valid e-mail address.</value>
  </data>
  <data name="InvalidInput" xml:space="preserve">
    <value>Invalid Input</value>
  </data>
  <data name="InvalidIPAddressInput" xml:space="preserve">
    <value>"IP Address" is not a valid IP address. If this is an IPv6 address, the IPv6 protocol should be installed.</value>
  </data>
  <data name="InvalidOwnerInput" xml:space="preserve">
    <value>"Owner" is not a valid e-mail address.</value>
  </data>
  <data name="InvalidPortInput" xml:space="preserve">
    <value>"Port" is not a valid IP port.</value>
  </data>
  <data name="IPAddress" xml:space="preserve">
    <value> IP Address:</value>
    <comment>Note: there is a space before this string</comment>
  </data>
  <data name="JayAtTailspintoysCom" xml:space="preserve">
    <value>jay@tailspintoys.com</value>
  </data>
  <data name="JayJones" xml:space="preserve">
    <value>Jay Jones</value>
  </data>
  <data name="ManageParticipants" xml:space="preserve">
    <value>Manage Participants</value>
  </data>
  <data name="ManageVenues" xml:space="preserve">
    <value>Manage Venues</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>   Name</value>
    <comment>Note: there are three (3) spaces before this string</comment>
  </data>
  <data name="NameColon" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>New...</value>
  </data>
  <data name="NewVenue" xml:space="preserve">
    <value>New Venue</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="Owner" xml:space="preserve">
    <value>Owner:</value>
  </data>
  <data name="ParticipantEditor" xml:space="preserve">
    <value>Participant Editor</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PasswordError" xml:space="preserve">
    <value>Password Error</value>
  </data>
  <data name="PasswordsDoNotMatch" xml:space="preserve">
    <value>Passwords do not match!</value>
  </data>
  <data name="Port" xml:space="preserve">
    <value> Port:</value>
    <comment>Note: there is a space before this string</comment>
  </data>
  <data name="PortInputDefaultValue" xml:space="preserve">
    <value>5004</value>
  </data>
  <data name="Refresh" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="Replace" xml:space="preserve">
    <value>Replace</value>
  </data>
  <data name="RestoreDefault" xml:space="preserve">
    <value>Restore Default</value>
  </data>
  <data name="SetPassword" xml:space="preserve">
    <value>Set Password</value>
  </data>
  <data name="ShowVenueOnlyToMatchingParticipants" xml:space="preserve">
    <value>Show venue only to participants matching these expressions:</value>
  </data>
  <data name="SpecifyWhoCanSeeThisVenue" xml:space="preserve">
    <value>Specify who can see this venue by participant identifier. Use regular expressions to specify individuals or groups.</value>
  </data>
  <data name="StorageFailureText" xml:space="preserve">
    <value>A failure occurred while accessing the storage file. The Admin Tool will now exit. Check the value of 'FilePath' in the application configuration file. 

Exception:
{0}</value>
  </data>
  <data name="StorageFailureTitle" xml:space="preserve">
    <value>Storage Failure</value>
  </data>
  <data name="UseEncryption" xml:space="preserve">
    <value>Use encryption</value>
  </data>
  <data name="VenueEditor" xml:space="preserve">
    <value>Venue Editor</value>
  </data>
  <data name="VenuePassword" xml:space="preserve">
    <value>Set Venue Password</value>
  </data>
</root>