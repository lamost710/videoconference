<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAEACACoDgAAFgAAACgAAAAwAAAAYAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAejI4AC1ROwBTShsAaE8dAFJUJwBvUysAVmgzAHBrMAAfKHEALDZyAGwySwBRNm8AFElJABRO
        VQAOVFsAFVRYACFQSgA3VUgAL0lSACVaVgA6WlgAO2dVAA1VagAtWHAAF2VzACVmaAA2a2UAN3JuACRq
        dgApc3sAPnlwAFVVSQB/QkEAfFhGAG9BWgBqX14AV3BIAG1qTgBZTnQAckxmAE5sbABWYmAASnJjAEJ1
        eQBWdHoAaWdmAHptbAB+eGsAb29wAH1hfwBoc3cAfHV2AI83LACMTjoAq0k0AIdpLgCOVVAAqlpNAIps
        UgCzZVcAjFpjAINpYQCZZWUAi3VrAJZ3awCdbXEAiXt5AJp7eACoaWUAtmxkAKV4aAC7c2oApW50AKp4
        dwC2eHgAyF1FAMtnVADBbWEAxnJnANp5bADDenMA0310AON+bgB0gj4Ab4xPAFKMeQBrlmkAe6lmAIuD
        OwCJjk8Aj6VbAJKMaQCElmAAmJpuAI6AfQCeg3wAs4t/AImwbADVg3kA6IZ3AJjCeAAUOJEAJjaLABc8
        rwAnO6YASzmEAA9ViAAqTY4ADGiMABZthwANcYoAFHKFAAlolQAYZ5YAFneTACd7iAA6eYIAJH6VABhO
        uQA1SrIADXWsADN4rgBJRJMAZlmPAEh5iABSeooARWqQAFdhngBnbYQAeGWKAGF/hgB2eoMAZn+SAHF+
        kABaXaUAZl+lAExnsgAeTdcAL1XOADNq0QArWeIAMmfrAEhZzwBdYsAAcm/HAIF+hACXfYMAvH+BABiG
        ngAnhJkANoKXAAyGqgAVhq0AHZGuAA6JugAZiLUADpC2ABuStgAliqgAN4qpACSQrwA3j7IAJJW5AD2S
        twBNgJEAWIKaAG6AhAB6goYAb4KUAH6ImQB3rYEAUIaqAEmVuABUlrkAa42rAGqauwB5kbAAVay3AGmn
        tgAMissAEI7AABmZyQAamtMALozMACWaxAAyl8UAJJ/RADOf3QAfo80AGKfYACaiyAAkqNYAK7TdADCz
        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
        /////+z9////////7P3////////s/f///////+z9////////7P3////////s/f///////+z9
</value>
  </data>
</root>